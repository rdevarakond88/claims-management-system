generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        String   @id @default(uuid())
  name      String
  npi       String   @unique
  city      String?
  state     String?
  phone     String?
  email     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  claims    Claim[]
  users     User[]

  @@map("providers")
}

model Payer {
  id        String   @id @default(uuid())
  name      String
  payerCode String   @unique @map("payer_code")
  city      String?
  state     String?
  phone     String?
  email     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("payers")
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  passwordHash      String     @map("password_hash")
  role              String
  providerId        String?    @map("provider_id")
  payerId           String?    @map("payer_id")
  firstName         String?    @map("first_name")
  lastName          String?    @map("last_name")
  isActive          Boolean    @default(true) @map("is_active")
  isFirstLogin      Boolean    @default(true) @map("is_first_login")
  lastLogin         DateTime?  @map("last_login")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  auditLogs         AuditLog[]
  adjudicatedClaims Claim[]    @relation("AdjudicatedBy")
  submittedClaims   Claim[]    @relation("SubmittedBy")
  payer             Payer?     @relation(fields: [payerId], references: [id])
  provider          Provider?  @relation(fields: [providerId], references: [id])

  @@map("users")
}

model Claim {
  id                  String     @id @default(uuid())
  claimNumber         String     @unique @map("claim_number")
  providerId          String     @map("provider_id")
  submittedByUserId   String     @map("submitted_by_user_id")
  status              String     @default("submitted")
  priority            Priority   @default(STANDARD)
  priorityConfidence  Decimal?   @map("priority_confidence") @db.Decimal(3, 2)
  priorityReasoning   String?    @map("priority_reasoning") @db.Text
  patientFirstName    String     @map("patient_first_name")
  patientLastName     String     @map("patient_last_name")
  patientDob          DateTime   @map("patient_dob") @db.Date
  patientMemberId     String     @map("patient_member_id")
  cptCode             String     @map("cpt_code")
  icd10Code           String     @map("icd10_code")
  serviceDate         DateTime   @map("service_date") @db.Date
  billedAmount        Decimal    @map("billed_amount") @db.Decimal(10, 2)
  approvedAmount      Decimal?   @map("approved_amount") @db.Decimal(10, 2)
  denialReasonCode    String?    @map("denial_reason_code")
  denialExplanation   String?    @map("denial_explanation")
  adjudicationNotes   String?    @map("adjudication_notes")
  adjudicatedByUserId String?    @map("adjudicated_by_user_id")
  adjudicatedAt       DateTime?  @map("adjudicated_at")
  submittedAt         DateTime   @default(now()) @map("submitted_at")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  auditLogs           AuditLog[]
  adjudicatedBy       User?      @relation("AdjudicatedBy", fields: [adjudicatedByUserId], references: [id])
  provider            Provider   @relation(fields: [providerId], references: [id])
  submittedBy         User       @relation("SubmittedBy", fields: [submittedByUserId], references: [id])

  @@index([priority, createdAt])
  @@map("claims")
}

model AuditLog {
  id        String   @id @default(uuid())
  claimId   String   @map("claim_id")
  userId    String   @map("user_id")
  action    String
  oldStatus String?  @map("old_status")
  newStatus String?  @map("new_status")
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  claim     Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum Priority {
  URGENT
  STANDARD
  ROUTINE
}
